require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

module Legacy
  RSpec.describe QuestionListsController, type: :controller do
    # This should return the minimal set of attributes required to create a valid
    # QuestionList. As you add validations to QuestionList, be sure to
    # adjust the attributes here as well.
    let(:valid_attributes) do
      { name: 'Questions for Parents', question_id_array: ['', '1', '2', '3'] }
    end

    let(:invalid_attributes) do
      { question_id_array: [''] }
    end

    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # QuestionListsController. Be sure to keep this updated too.
    let(:valid_session) { {} }

    describe 'GET #index' do
      it 'assigns all question_lists as @question_lists' do
        question_list = QuestionList.create! valid_attributes
        get :index, params: {}, session: valid_session
        expect(assigns(:question_lists)).to eq([question_list])
      end
    end

    describe 'GET #show' do
      it 'assigns the requested question_list as @question_list' do
        question_list = QuestionList.create! valid_attributes
        get :show, params: { id: question_list.to_param }, session: valid_session
        expect(assigns(:question_list)).to eq(question_list)
      end
    end

    describe 'GET #new' do
      it 'assigns a new question_list as @question_list' do
        get :new, params: {}, session: valid_session
        expect(assigns(:question_list)).to be_a_new(QuestionList)
      end
    end

    describe 'GET #edit' do
      it 'assigns the requested question_list as @question_list' do
        question_list = QuestionList.create! valid_attributes
        get :edit, params: { id: question_list.to_param }, session: valid_session
        expect(assigns(:question_list)).to eq(question_list)
      end
    end

    describe 'POST #create' do
      context 'with valid params' do
        it 'creates a new QuestionList' do
          expect do
            post :create, params: { question_list: valid_attributes }, session: valid_session
          end.to change(QuestionList, :count).by(1)
        end

        it 'assigns a newly created question_list as @question_list' do
          post :create, params: { question_list: valid_attributes }, session: valid_session
          expect(assigns(:question_list)).to be_a(QuestionList)
          expect(assigns(:question_list)).to be_persisted
        end

        it 'redirects to the created question_list' do
          post :create, params: { question_list: valid_attributes }, session: valid_session
          expect(response).to redirect_to(QuestionList.last)
        end
      end

      context 'with invalid params' do
        it 'assigns a newly created but unsaved question_list as @question_list' do
          post :create, params: { question_list: invalid_attributes }, session: valid_session
          expect(assigns(:question_list)).to be_a_new(QuestionList)
        end

        it "re-renders the 'new' template" do
          post :create, params: { question_list: invalid_attributes }, session: valid_session
          expect(response).to render_template('new')
        end
      end
    end

    describe 'PUT #update' do
      context 'with valid params' do
        let(:new_attributes) do
          { question_id_array: ['', '2', '3'] }
        end

        it 'updates the requested question_list' do
          question_list = QuestionList.create! valid_attributes
          put :update, params: { id: question_list.to_param, question_list: new_attributes }, session: valid_session
          question_list.reload
          expect(question_list.question_ids).to eq('2,3')
        end

        it 'assigns the requested question_list as @question_list' do
          question_list = QuestionList.create! valid_attributes
          put :update, params: { id: question_list.to_param, question_list: valid_attributes }, session: valid_session
          expect(assigns(:question_list)).to eq(question_list)
        end

        it 'redirects to the question_list' do
          question_list = QuestionList.create! valid_attributes
          put :update, params: { id: question_list.to_param, question_list: valid_attributes }, session: valid_session
          expect(response).to redirect_to(question_list)
        end
      end

      context 'with invalid params' do
        it 'assigns the question_list as @question_list' do
          question_list = QuestionList.create! valid_attributes
          put :update, params: { id: question_list.to_param, question_list: invalid_attributes }, session: valid_session
          expect(assigns(:question_list)).to eq(question_list)
        end

        it "re-renders the 'edit' template" do
          question_list = QuestionList.create! valid_attributes
          put :update, params: { id: question_list.to_param, question_list: invalid_attributes }, session: valid_session
          expect(response).to render_template('edit')
        end
      end
    end

    describe 'DELETE #destroy' do
      it 'destroys the requested question_list' do
        question_list = QuestionList.create! valid_attributes
        expect do
          delete :destroy, params: { id: question_list.to_param }, session: valid_session
        end.to change(QuestionList, :count).by(-1)
      end

      it 'redirects to the question_lists list' do
        question_list = QuestionList.create! valid_attributes
        delete :destroy, params: { id: question_list.to_param }, session: valid_session
        expect(response).to redirect_to(legacy_question_lists_url)
      end
    end
  end
end
