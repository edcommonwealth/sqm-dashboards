require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

module Legacy
  RSpec.describe RecipientsController, type: :controller do

    let!(:user) { User.create(email: 'test@test.com', password: '123456') }
    let(:school) { School.create!(name: 'School') }

    # This should return the minimal set of attributes required to create a valid
    # Recipient. As you add validations to Recipient, be sure to
    # adjust the attributes here as well.
    let(:valid_attributes) {
      {
        name: 'Recipient Name',
        phone: '111-222-3333',
        school_id: school.id
      }
    }

    let(:invalid_attributes) { { name: '', phone: '111-222-3333' } }

    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # RecipientsController. Be sure to keep this updated too.
    let(:valid_session) { {} }

    before :each do
      user.user_schools.create(school: school)
      sign_in user
    end

    describe "GET #index" do
      it "assigns all recipients as @recipients" do
        recipient = Recipient.create! valid_attributes
        get :index, params: { school_id: school.to_param }, session: valid_session
        expect(assigns(:recipients)).to eq([recipient])
      end
    end

    describe "GET #show" do
      it "assigns the requested recipient as @recipient" do
        recipient = Recipient.create! valid_attributes
        get :show, params: { school_id: school.to_param, id: recipient.to_param }, session: valid_session
        expect(assigns(:recipient)).to eq(recipient)
      end
    end

    describe "GET #new" do
      it "assigns a new recipient as @recipient" do
        get :new, params: { school_id: school.id }, session: valid_session
        expect(assigns(:recipient)).to be_a_new(Recipient)
      end
    end

    describe "GET #edit" do
      it "assigns the requested recipient as @recipient" do
        recipient = Recipient.create! valid_attributes
        get :edit, params: { school_id: school.to_param, id: recipient.to_param }, session: valid_session
        expect(assigns(:recipient)).to eq(recipient)
      end
    end

    describe "POST #create" do
      context "with valid params" do
        it "creates a new Recipient" do
          expect {
            post :create, params: { school_id: school.to_param, recipient: valid_attributes }, session: valid_session
          }.to change(Recipient, :count).by(1)
        end

        it "assigns a newly created recipient as @recipient" do
          post :create, params: { school_id: school.to_param, recipient: valid_attributes }, session: valid_session
          expect(assigns(:recipient)).to be_a(Recipient)
          expect(assigns(:recipient)).to be_persisted
        end

        it "redirects to the created recipient" do
          post :create, params: { school_id: school.to_param, recipient: valid_attributes }, session: valid_session
          expect(response).to redirect_to(legacy_school_legacy_recipient_path(school, Recipient.last))
        end
      end

      context "with invalid params" do
        it "assigns a newly created but unsaved recipient as @recipient" do
          post :create, params: { school_id: school.to_param, recipient: invalid_attributes }, session: valid_session
          expect(assigns(:recipient)).to be_a_new(Recipient)
        end

        it "re-renders the 'new' template" do
          post :create, params: { school_id: school.to_param, recipient: invalid_attributes }, session: valid_session
          expect(response).to render_template("new")
        end
      end
    end

    describe "PUT #update" do
      context "with valid params" do
        let(:new_attributes) {
          { name: 'New Name' }
        }

        it "updates the requested recipient" do
          recipient = Recipient.create! valid_attributes
          put :update, params: { school_id: school.to_param, id: recipient.to_param, recipient: new_attributes }, session: valid_session
          recipient.reload
          expect(recipient.name).to eq('New Name')
          expect(recipient.phone).to eq('111-222-3333')
        end

        it "assigns the requested recipient as @recipient" do
          recipient = Recipient.create! valid_attributes
          put :update, params: { school_id: school.to_param, id: recipient.to_param, recipient: valid_attributes }, session: valid_session
          expect(assigns(:recipient)).to eq(recipient)
        end

        it "redirects to the recipient" do
          recipient = Recipient.create! valid_attributes
          put :update, params: { school_id: school.to_param, id: recipient.to_param, recipient: valid_attributes }, session: valid_session
          expect(response).to redirect_to(legacy_school_legacy_recipient_url(school, recipient))
        end
      end

      context "with invalid params" do
        it "assigns the recipient as @recipient" do
          recipient = Recipient.create! valid_attributes
          put :update, params: { school_id: school.to_param, id: recipient.to_param, recipient: invalid_attributes }, session: valid_session
          expect(assigns(:recipient)).to eq(recipient)
        end

        it "re-renders the 'edit' template" do
          recipient = Recipient.create! valid_attributes
          put :update, params: { school_id: school.to_param, id: recipient.to_param, recipient: invalid_attributes }, session: valid_session
          expect(response).to render_template("edit")
        end
      end
    end

    describe "DELETE #destroy" do
      it "destroys the requested recipient" do
        recipient = Recipient.create! valid_attributes
        expect {
          delete :destroy, params: { school_id: school.to_param, id: recipient.to_param }, session: valid_session
        }.to change(Recipient, :count).by(-1)
      end

      it "redirects to the recipients list" do
        recipient = Recipient.create! valid_attributes
        delete :destroy, params: { school_id: school.to_param, id: recipient.to_param }, session: valid_session
        expect(response).to redirect_to(school)
      end
    end

  end
end
