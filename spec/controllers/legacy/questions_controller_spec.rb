require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

module Legacy
  RSpec.describe QuestionsController, type: :controller do
    # This should return the minimal set of attributes required to create a valid
    # Question. As you add validations to Question, be sure to
    # adjust the attributes here as well.
    let!(:user) { User.create(email: 'test@test.com', password: '123456') }
    let(:category) { Legacy::Category.create!(name: 'Category') }
    let(:valid_attributes) do
      {
        text: 'Question',
        option1: 'option1',
        option2: 'option2',
        option3: 'option3',
        option4: 'option4',
        option5: 'option5',
        category_id: category.id
      }
    end

    let(:invalid_attributes) do
      { text: '' }
    end

    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # QuestionsController. Be sure to keep this updated too.
    let(:valid_session) { {} }

    before :each do
      sign_in user
    end

    describe 'GET #index' do
      it 'assigns all questions as @questions' do
        question = Question.create! valid_attributes
        get :index, params: {}, session: valid_session
        expect(assigns(:questions)).to eq([question])
      end
    end

    describe 'GET #show' do
      it 'assigns the requested question as @question' do
        school = School.create!(name: 'School')
        question = Question.create! valid_attributes
        get :show, params: { school_id: school.id, id: question.to_param }, session: valid_session
        expect(assigns(:question)).to eq(question)
        expect(assigns(:school)).to eq(school)
      end
    end

    describe 'GET #new' do
      it 'assigns a new question as @question' do
        get :new, params: {}, session: valid_session
        expect(assigns(:question)).to be_a_new(Question)
      end
    end

    describe 'GET #edit' do
      it 'assigns the requested question as @question' do
        question = Question.create! valid_attributes
        get :edit, params: { id: question.to_param }, session: valid_session
        expect(assigns(:question)).to eq(question)
      end
    end

    describe 'POST #create' do
      context 'with valid params' do
        it 'creates a new Question' do
          expect do
            post :create, params: { question: valid_attributes }, session: valid_session
          end.to change(Question, :count).by(1)
        end

        it 'assigns a newly created question as @question' do
          post :create, params: { question: valid_attributes }, session: valid_session
          expect(assigns(:question)).to be_a(Question)
          expect(assigns(:question)).to be_persisted
        end

        it 'redirects to the created question' do
          post :create, params: { question: valid_attributes }, session: valid_session
          expect(response).to redirect_to(Question.last)
        end
      end

      context 'with invalid params' do
        it 'assigns a newly created but unsaved question as @question' do
          post :create, params: { question: invalid_attributes }, session: valid_session
          expect(assigns(:question)).to be_a_new(Question)
        end

        it "re-renders the 'new' template" do
          post :create, params: { question: invalid_attributes }, session: valid_session
          expect(response).to render_template('new')
        end
      end
    end

    describe 'PUT #update' do
      context 'with valid params' do
        let(:new_attributes) do
          { text: 'Question2' }
        end

        it 'updates the requested question' do
          question = Question.create! valid_attributes
          put :update, params: { id: question.to_param, question: new_attributes }, session: valid_session
          question.reload
          expect(question.text).to eq('Question2')
        end

        it 'assigns the requested question as @question' do
          question = Question.create! valid_attributes
          put :update, params: { id: question.to_param, question: valid_attributes }, session: valid_session
          expect(assigns(:question)).to eq(question)
        end

        it 'redirects to the question' do
          question = Question.create! valid_attributes
          put :update, params: { id: question.to_param, question: valid_attributes }, session: valid_session
          expect(response).to redirect_to(question)
        end
      end

      context 'with invalid params' do
        it 'assigns the question as @question' do
          question = Question.create! valid_attributes
          put :update, params: { id: question.to_param, question: invalid_attributes }, session: valid_session
          expect(assigns(:question)).to eq(question)
        end

        it "re-renders the 'edit' template" do
          question = Question.create! valid_attributes
          put :update, params: { id: question.to_param, question: invalid_attributes }, session: valid_session
          expect(response).to render_template('edit')
        end
      end
    end

    describe 'DELETE #destroy' do
      it 'destroys the requested question' do
        question = Question.create! valid_attributes
        expect do
          delete :destroy, params: { id: question.to_param }, session: valid_session
        end.to change(Question, :count).by(-1)
      end

      it 'redirects to the questions list' do
        question = Question.create! valid_attributes
        delete :destroy, params: { id: question.to_param }, session: valid_session
        expect(response).to redirect_to(legacy_questions_url)
      end
    end
  end
end
