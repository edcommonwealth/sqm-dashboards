require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

module Legacy
  RSpec.describe SchedulesController, type: :controller do
    let!(:user) { User.create(email: 'test@test.com', password: '123456') }
    let!(:school) { School.create!(name: 'School') }

    let!(:recipients) { create_recipients(school, 3) }
    let!(:recipient_list) do
      school.recipient_lists.create!(name: 'Parents', recipient_ids: recipients.map(&:id).join(','))
    end

    let!(:questions) { create_questions(3) }
    let!(:question_list) do
      QuestionList.create!(name: 'Parent Questions', question_ids: questions.map(&:id).join(','))
    end

    # This should return the minimal set of attributes required to create a valid
    # Schedule. As you add validations to Schedule, be sure to
    # adjust the attributes here as well.
    let(:valid_attributes) do
      {
        school_id: school.id,
        recipient_list_id: recipient_list.id,
        question_list_id: question_list.id,
        name: 'Parents Schedule',
        description: 'Schedule for parent questions',
        time: (8 * 60)
      }
    end

    let(:invalid_attributes) do
      { name: '' }
    end

    # This should return the minimal set of values that should be in the session
    # in order to pass any filters (e.g. authentication) defined in
    # SchedulesController. Be sure to keep this updated too.
    let(:valid_session) { {} }

    before :each do
      user.user_schools.create(school: school)
      sign_in user
    end

    describe 'GET #show' do
      it 'assigns the requested schedule as @schedule' do
        schedule = Schedule.create! valid_attributes
        get :show, params: { school_id: school.id, id: schedule.to_param }, session: valid_session
        expect(assigns(:schedule)).to eq(schedule)
      end
    end

    describe 'GET #new' do
      it 'assigns a new schedule as @schedule' do
        get :new, params: { school_id: school.id }, session: valid_session
        expect(assigns(:schedule)).to be_a_new(Schedule)
      end
    end

    describe 'GET #edit' do
      it 'assigns the requested schedule as @schedule' do
        schedule = Schedule.create! valid_attributes
        get :edit, params: { school_id: school.id, id: schedule.to_param }, session: valid_session
        expect(assigns(:schedule)).to eq(schedule)
      end
    end

    describe 'POST #create' do
      context 'with valid params' do
        it 'creates a new Schedule' do
          expect do
            post :create, params: { school_id: school.id, schedule: valid_attributes }, session: valid_session
          end.to change(Schedule, :count).by(1)
        end

        it 'assigns a newly created schedule as @schedule' do
          post :create, params: { school_id: school.id, schedule: valid_attributes }, session: valid_session
          expect(assigns(:schedule)).to be_a(Schedule)
          expect(assigns(:schedule)).to be_persisted
        end

        it "updates the schedule's time to UTC from EST" do
          post :create, params: { school_id: school.id, schedule: valid_attributes }, session: valid_session
          expect(assigns(:schedule)).to be_a(Schedule)
          expect(assigns(:schedule).time).to eq(60 * 12)
        end

        it 'redirects to the created schedule' do
          post :create, params: { school_id: school.id, schedule: valid_attributes }, session: valid_session
          expect(response).to redirect_to([school, Schedule.last])
        end
      end

      context 'with invalid params' do
        it 'assigns a newly created but unsaved schedule as @schedule' do
          post :create, params: { school_id: school.id, schedule: invalid_attributes }, session: valid_session
          expect(assigns(:schedule)).to be_a_new(Schedule)
        end

        it "re-renders the 'new' template" do
          post :create, params: { school_id: school.id, schedule: invalid_attributes }, session: valid_session
          expect(response).to render_template('new')
        end
      end
    end

    describe 'PUT #update' do
      context 'with valid params' do
        let(:new_attributes) do
          { name: 'New Name' }
        end

        it 'updates the requested schedule' do
          schedule = Schedule.create! valid_attributes
          put :update, params: { school_id: school.id, id: schedule.to_param, schedule: new_attributes },
                       session: valid_session
          schedule.reload
          expect(schedule.name).to eq('New Name')
        end

        it 'assigns the requested schedule as @schedule' do
          schedule = Schedule.create! valid_attributes
          put :update, params: { school_id: school.id, id: schedule.to_param, schedule: valid_attributes },
                       session: valid_session
          expect(assigns(:schedule)).to eq(schedule)
        end

        it 'redirects to the schedule' do
          schedule = Schedule.create! valid_attributes
          put :update, params: { school_id: school.id, id: schedule.to_param, schedule: valid_attributes },
                       session: valid_session
          expect(response).to redirect_to([school, schedule])
        end
      end

      context 'with invalid params' do
        it 'assigns the schedule as @schedule' do
          schedule = Schedule.create! valid_attributes
          put :update, params: { school_id: school.id, id: schedule.to_param, schedule: invalid_attributes },
                       session: valid_session
          expect(assigns(:schedule)).to eq(schedule)
        end

        it "re-renders the 'edit' template" do
          schedule = Schedule.create! valid_attributes
          put :update, params: { school_id: school.id, id: schedule.to_param, schedule: invalid_attributes },
                       session: valid_session
          expect(response).to render_template('edit')
        end
      end
    end

    describe 'DELETE #destroy' do
      it 'destroys the requested schedule' do
        schedule = Schedule.create! valid_attributes
        expect do
          delete :destroy, params: { school_id: school.id, id: schedule.to_param }, session: valid_session
        end.to change(Schedule, :count).by(-1)
      end

      it 'redirects to the schedules list' do
        schedule = Schedule.create! valid_attributes
        delete :destroy, params: { school_id: school.id, id: schedule.to_param }, session: valid_session
        expect(response).to redirect_to(school)
      end
    end
  end
end
